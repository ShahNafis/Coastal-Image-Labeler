(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{168:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return d}));var n=a(2),r=a(9),o=(a(0),a(177)),i={id:"models",title:"Models",sidebar_label:"Models"},l={id:"code_doc/database/models",title:"Models",description:"A major change in the v3 Dashboard is the structure of the database. More models where added to help with performance and creating queries.",source:"@site/docs/code_doc/database/models.md",permalink:"/Coastal-Image-Labeler/docs/code_doc/database/models",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/code_doc/database/models.md",sidebar_label:"Models",sidebar:"docs",previous:{title:"Connection",permalink:"/Coastal-Image-Labeler/docs/code_doc/database/connection"},next:{title:"Setting up CLI",permalink:"/Coastal-Image-Labeler/docs/code_doc/cli/cli"}},c=[{value:"Terminaology",id:"terminaology",children:[]},{value:"Models",id:"models",children:[{value:"Catalog",id:"catalog",children:[]},{value:"Images",id:"images",children:[]},{value:"Question Set",id:"question-set",children:[]},{value:"Assigned Image",id:"assigned-image",children:[]},{value:"Tag",id:"tag",children:[]},{value:"Image Serve Order",id:"image-serve-order",children:[]},{value:"User",id:"user",children:[]}]},{value:"Namespaces",id:"namespaces",children:[]}],s={rightToc:c};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"A major change in the v3 Dashboard is the structure of the database. More models where added to help with performance and creating queries."),Object(o.b)("h2",{id:"terminaology"},"Terminaology"),Object(o.b)("p",null,"I will draw comparisions from MongoDB to SQL terms. Starting from the bottom,"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"Row")," in SQL is called a ",Object(o.b)("inlineCode",{parentName:"p"},"Document")," in MongoDB."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"For example we have a Document for image ",Object(o.b)("inlineCode",{parentName:"li"},"P25959661.jpg")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"Table")," in SQL is called a ",Object(o.b)("inlineCode",{parentName:"p"},"Collection")," in MongoDB."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"For example we have a Collection for all images"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"Schema")," in SQL is a ",Object(o.b)("inlineCode",{parentName:"p"},"Namespace")," in MongoDB."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"For example we have a Namespace called ",Object(o.b)("inlineCode",{parentName:"li"},"dev")," or one called ",Object(o.b)("inlineCode",{parentName:"li"},"production"),".")))),Object(o.b)("h2",{id:"models"},"Models"),Object(o.b)("p",null,"The following are the TypeScript interfaces for each model. If a key has a ",Object(o.b)("inlineCode",{parentName:"p"},"?")," next to it means its optional."),Object(o.b)("h3",{id:"catalog"},"Catalog"),Object(o.b)("p",null,"The Catalog object is the overarching model that contains the archives which in\nturn contains the images. It also contains the questions that are applied to all\nimages of archives that are part of this catalog. This is the types of the\nCatalog."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js",metastring:'title="Catalog model"',title:'"Catalog','model"':!0}),"export interface CatalogDocument extends Document {\n  dateAdded?: Date\n  name: string\n  path: {\n    original: string\n    compressed?: string\n  }\n  catalogInfo?: CatalogInfo\n  taggable: boolean\n  questionSet: ObjectID | string\n  imageServeOrder: ObjectID\n  totalImages?: number\n\n  updateImageCount(): Promise<void> //Function to update totalImages\n}\n")),Object(o.b)("h4",{id:"archives"},"Archives"),Object(o.b)("p",null,"These are subfolders of the Catalogs and is originally in place due to how the\nNOAA images where downloaded. They serve no other purpose other then to group\nimages up and serve as a link between Catalogs and Images"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js",metastring:'title="Archive model"',title:'"Archive','model"':!0}),"export interface ArchiveDocument extends Document {\n  dateAdded?: Date\n  name: string\n  path: {\n    original: string\n    compressed?: string\n  }\n  catalog: ObjectID\n  taggable: boolean\n  totalImages?: number\n\n  updateImageCount(): Promise<void> //function to update totalImages\n}\n")),Object(o.b)("h3",{id:"images"},"Images"),Object(o.b)("p",null,"The Image models most important fields are the ",Object(o.b)("inlineCode",{parentName:"p"},"tags"),", the ",Object(o.b)("inlineCode",{parentName:"p"},"tillComplete")," and\n",Object(o.b)("inlineCode",{parentName:"p"},"taggable")," fields. A major change is the ",Object(o.b)("inlineCode",{parentName:"p"},"tillComplete"),",",Object(o.b)("inlineCode",{parentName:"p"},"finalTag"),",",Object(o.b)("inlineCode",{parentName:"p"},"finishedTagging"),",and ",Object(o.b)("inlineCode",{parentName:"p"},"tags")," fields have been removed"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js",metastring:'title="Image model"',title:'"Image','model"':!0}),"export interface ImageDocument extends Document {\n  archive: ObjectID\n  dateAdded?: Date\n  name: string\n  path: {\n    original: string\n    compressed?: string\n  }\n  taggable: boolean\n}\n")),Object(o.b)("h3",{id:"question-set"},"Question Set"),Object(o.b)("p",null,"Of the current models, the question set is the only one that is ",Object(o.b)("strong",{parentName:"p"},"NOT")," checked.\nIt serves simply as a guideline for admins to use. Due to this nature it is\n",Object(o.b)("strong",{parentName:"p"},"HIGHLY")," reccomended to make sure the documents for Question Sets are correct\nand is best to copy an existing one"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js",metastring:'title="Question Set model"',title:'"Question',Set:!0,'model"':!0}),"export interface QuestionSetDocument extends Document {\n    name:string,\n    description:string,\n    questions:[any]\n}\n")),Object(o.b)("h3",{id:"assigned-image"},"Assigned Image"),Object(o.b)("p",null,"This is one of the newer models. It serves to store the currerntly assigned image of a (user,archive) pair. This model requires that ",Object(o.b)("inlineCode",{parentName:"p"},"imageId"),",",Object(o.b)("inlineCode",{parentName:"p"},"archiveId"),",",Object(o.b)("inlineCode",{parentName:"p"},"userId")," be given. The remaining fields are automatically created"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js",metastring:'title="Assigned Image model"',title:'"Assigned',Image:!0,'model"':!0}),"export interface AssingedImageDocument extends Document {\n  imageId: ObjectID\n  catalogId?: ObjectID\n  archiveId?: ObjectID\n  userId: ObjectID\n  date: Date\n  archive?: ArchiveDocument\n  catalog?: CatalogDocument\n}\n")),Object(o.b)("h3",{id:"tag"},"Tag"),Object(o.b)("p",null,"Another new model. This model takes the data from the ",Object(o.b)("inlineCode",{parentName:"p"},"tags")," field of an image and places each tag as a new entry. This is done for many reasons. Firsty it makes it easy to get a list of images that have been tagged, since every entry is a tag of an image that has been tagged. It also ensures that certain pieces of information are recorded such as ",Object(o.b)("inlineCode",{parentName:"p"},"userId")," and ",Object(o.b)("inlineCode",{parentName:"p"},"imageId")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js",metastring:'title="Tag model"',title:'"Tag','model"':!0}),"export interface TagDocument extends Document {\n  imageId: ObjectID\n  catalogId?: ObjectID\n  archiveId?: ObjectID\n  userId: ObjectID\n  tags?: any\n  date: Date\n  ignoreFields?: string[]\n  image?: ImageDocument\n}\n")),Object(o.b)("h3",{id:"image-serve-order"},"Image Serve Order"),Object(o.b)("p",null,"The final new model. This model stores data about how to serve images for a catalog. If the order is random there isnt anything to special. However if the order is sequential, then a 2nd field must be filled, called ",Object(o.b)("inlineCode",{parentName:"p"},"data"),". This will contain the order of the images to serve. For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"data: {\n    \"arc1\":['image1.jpg','image2.jpg','image3.jpg','image4.jpg']\n}\n")),Object(o.b)("p",null,"If an archive isnt on the list, the system will default to using random order."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js",metastring:'title="Image Serve Order model"',title:'"Image',Serve:!0,Order:!0,'model"':!0}),"export interface ImageServeOrderDocument extends Document {\n  type: 'random' | 'sequential'\n  data?: any\n}\n")),Object(o.b)("h3",{id:"user"},"User"),Object(o.b)("p",null,"Finally there is the user model which is more or less the same"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js",metastring:'title="User model"',title:'"User','model"':!0}),"export interface UserDocument extends Document {\n  username: string\n  catalogs: [ObjectID]\n  dateAdded: Date\n  roles: string[]\n  userId: string\n}\n")),Object(o.b)("h2",{id:"namespaces"},"Namespaces"),Object(o.b)("p",null,"As mentioned before Namespaces are like Schemas in SQL. Generally there are 3, a\ndev namespace,a production namespace and test namespace."))}d.isMDXComponent=!0},177:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return g}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),d=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=d(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=d(a),p=n,g=m["".concat(i,".").concat(p)]||m[p]||b[p]||o;return a?r.a.createElement(g,l(l({ref:t},s),{},{components:a})):r.a.createElement(g,l({ref:t},s))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"}}]);